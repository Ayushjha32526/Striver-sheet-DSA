import java.util.Arrays;
import java.util.Comparator;

class Solution {
    double fractionalKnapsack(int[] val, int[] wt, int W) {
        int n = wt.length;
        double[][] act = new double[n][3]; // [index, value, value/weight ratio]
        
        for (int i = 0; i < n; i++) {
            act[i][0] = i;                     // index
            act[i][1] = val[i];                // value
            act[i][2] = (double) val[i] / wt[i]; // value/weight ratio
        }
        
        // Sort by ratio descending (higher value/weight first)
        Arrays.sort(act, (a, b) -> Double.compare(b[2], a[2]));
        
        double value = 0.0;
        int cap = W;
        
        for (int i = 0; i < n; i++) {
            int idx = (int) act[i][0]; // get original index
            
            if (wt[idx] <= cap) {
                // Take the full item
                cap -= wt[idx];
                value += val[idx];
            } else {
                // Take fractional part
                value += act[i][2] * cap; // ratio * remaining capacity
                break; // knapsack full
            }
        }
        
        return value;
    }
}
