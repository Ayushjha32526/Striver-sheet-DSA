class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n = wt.length;
        int v = val.length;
        int dp[][] = new int [n][W+1];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<=W;j++){
                dp[i][j]=-1;
            }
        }
        
        
        
      return  knap(W,val,wt,n-1,dp);
        
    }
    
    static int knap(int W, int val[], int wt[], int index,int [][] dp){
        
   
   if(index < 0 || W == 0) return 0;
      
    if(dp[index][W]!=-1){
        return dp[index ][W];
    }
    
    //pick me case
    int pick=0;
   if(wt[index]<= W){
         pick= val[index] + knap(W-wt[index],val ,wt,index-1,dp);
   }
   
   // no pick
   
   int nopick =  knap(W,val,wt,index-1,dp);
   
   dp[index][W]=Math.max(pick,nopick);
    
    return dp[index ][W];
    }
    
}
