class Solution {
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }

        // If total sum is odd, we can't divide it into two equal subsets
        if (sum % 2 != 0) {
            return false;
        }

        int target = sum / 2;
        return subset(nums, target, n);
    }

    public boolean subset(int[] arr, int target, int n) {
        boolean[][] dp = new boolean[n + 1][target + 1];

        // Base case: sum 0 is always possible
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }

        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                if (arr[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j]; // skip current item
                } else {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]]; // include or exclude
                }
            }
        }

        return dp[n][target];
    }
}
