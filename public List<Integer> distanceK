/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> arr = new ArrayList<>();
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        
        // Step 1: Build parent map
        TreeNode tar = distance(root, target, k, map);
        
        // Step 2: BFS from target node
        Queue<TreeNode> queue = new LinkedList<>();
        Set<TreeNode> visited = new HashSet<>();
        queue.add(tar);
        visited.add(tar);
        int dist = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            if (dist == k) break;

            for (int i = 0; i < size; i++) {
                TreeNode current = queue.poll();

                if (current.left != null && !visited.contains(current.left)) {
                    queue.offer(current.left);
                    visited.add(current.left);
                }

                if (current.right != null && !visited.contains(current.right)) {
                    queue.offer(current.right);
                    visited.add(current.right);
                }

                TreeNode parent = map.get(current);
                if (parent != null && !visited.contains(parent)) {
                    queue.offer(parent);
                    visited.add(parent);
                }
            }

            dist++;
        }

        // Step 3: Add remaining nodes in queue to result
        while (!queue.isEmpty()) {
            arr.add(queue.poll().val);
        }

        return arr;
    }

    // This function builds parent map and finds the actual target node
    public TreeNode distance(TreeNode root, TreeNode target, int k, HashMap<TreeNode, TreeNode> map) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        TreeNode tar = null;

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();

            if (current.left != null) {
                map.put(current.left, current);  // Store parent reference
                queue.offer(current.left);
            }

            if (current.right != null) {
                map.put(current.right, current);
                queue.offer(current.right);
            }

            if (current == target) {
                tar = current;
            }
        }

        return tar;
    }
}
