class Solution {
    // Function to sort an array using Heap Sort.
    public static void heapSort(int arr[]) {
        int n = arr.length;

        // Step 1: Build max heap
        for (int i = (n / 2) - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }

        // Step 2: Extract elements from heap
        for (int i = n - 1; i > 0; i--) {
            swap(arr, 0, i); // Move current root to end
            heapify(arr, i, 0); // Heapify the reduced heap
        }
    }

    // Function to maintain heap property
    public static void heapify(int[] arr, int n, int i) {
        int larg = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < n && arr[left] > arr[larg]) {
            larg = left;
        }

        if (right < n && arr[right] > arr[larg]) {
            larg = right;
        }

        if (larg != i) {
            swap(arr, i, larg);
            heapify(arr, n, larg);
        }
    }

    // Swap helper function
    public static void swap(int[] arr, int start, int end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }
}
