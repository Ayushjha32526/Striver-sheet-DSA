import java.util.*;

class FrequentWords {
    static class Pair {
        String word;
        int freq;

        Pair(String word, int freq) {
            this.word = word;
            this.freq = freq;
        }

        @Override
        public String toString() {
            return word + " " + freq + "\n";
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        sc.nextLine(); // Consume leftover newline

        String[] words = new String[n];
        for (int i = 0; i < n; i++) {
            words[i] = sc.nextLine().trim();//agar i kai baad galti sai bhi space maar diya to ek "i" aur ek "i " aisa to isliye trim
        }

        int k = sc.nextInt();

        // 1. Count frequencies
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }

        // 2. Use a max-heap priority queue
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> {
            if (b.freq != a.freq) return b.freq - a.freq;              // Higher freq first
            return a.word.compareTo(b.word);                           // Lexicographically smaller first
        });

        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            pq.offer(new Pair(entry.getKey(), entry.getValue()));
        }

        // 3. Build result
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < k && !pq.isEmpty(); i++) {
            str.append(pq.poll()); // toString handles formatting
        }

        // 4. Output
        System.out.println(str.toString());
    }
}
